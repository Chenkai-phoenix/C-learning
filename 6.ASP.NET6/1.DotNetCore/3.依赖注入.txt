一、
1.依赖注入：Dependency Injection   DI     （需要啥类内声明啥，创建对象时框架自动赋值）
2.控制反转：Inversion of Control    IOC  (需要啥自己写) 
3.IOC的实现方式：DI和服务定位器（ServiceLocator）
二、DI的几个概念
（1）服务（service） ：对象
（2）注册服务：创建服务前的行为
（3）服务容器：负责管理注册的服务
（4）查询服务：创建对象及关联对象
（5）对象声明周期：Transient（瞬态）需要时新生成，用完就销毁；
                   Scoped（范围）范围内是获得同一个服务（对象）；
				   Singleton（单例）任意情况下获得同一个服务（对象）；

三.dotnet中DI的使用
1.服务类型与实现类型可能一致可能不一致（多态）
2.服务类型尽量使用接口,实现类型使用类
3.dotnet的IOC组件名为：DependencyInjection(DI),包含了服务定位器ServiceLocator的功能；
4.安装DependencyInjection(DI)组件
5.命名空间：using Microsoft.Extensions.DependencyInjection;
6.实现步骤：
（1）创建一个服务集合
（2）服务集合添加服务
（3）从集合中创建服务提供对象
（4）向服务提供对象要服务对象
四、服务的生命周期
Transient（瞬态）需要时新生成，用完就销毁；
Singleton（单例）任意情况下获得同一个服务（对象）；
Scoped（范围）范围内是获得同一个服务（对象）：使用时由服务提供对象创建范围IServiceScope ss1 = sp.CreateScope()
五.
ServiceProvider，IServiceScope 都继承了IDisposable，涉及资源使用using（）
六、
DI具有传染性，当服务都注册时，获取一个由多个服务实现的服务时，dotnet框架会自动通过这些服务的构造函数注入；
/*----DI综合案例
 * 1.目的：演示DI的能力
 * 2.有配置服务，日志服务，开发一个邮件发送器服务。可以用过配置服务来从文件，环境变量，数据库等地方读取配置，
 * 可以通过日志服务来将程序运行过程中的日志信息写入文件，控制台，数据库等；
 * 
 * 
 */
 七、/*----类的扩展方法
 * 1.改变命名空间，使用要扩展的类对应的命名空间
 * 2.使用静态类，静态方法
 * 3.语法：扩展方法名（this 类名 类变量，【参数类型 参数名....】 ）{}
 * 4.对某个类的方法进行修改形成该类的新方法，但不是对该类方法的重载；
 */